import numpy as np
from time import time
from utils.Utils import Utils
from interfaces.clustering_result import ClusteringResult

"""
Description:
A  class to represent a Double Blind Secure Nearest Neighbour Clustering (DBSNNC)
Attributes: 
	D1: Encrypted dataset 
	ED: Distance matrix
	a: Number of attributes of D1
Variables:
	C: Set of clusters
"""
class Dbsnnc(object):

	def run(**kwargs):
		startTime          = time()
		ED                 = kwargs.get("EDM")
		threshold          = kwargs.get("encrypted_threshold")
		EDshape            = Utils.getShapeOfMatrix(ED)
		start_service_time = time()
		c_indexes          = [[0]] #index of the first record in D

		for record_index in range(1,EDshape[0]): #iterate through the records in D
			for cluster_index, index_cluster in enumerate(c_indexes): #iterate the indexes of the clusters
				record_distances = [] #distances of a record with respect to all the elements of the cluster
				for record_index_cluster in index_cluster: # iterate through the list of cluster indexes
					edi = ED[record_index][record_index_cluster] #locate the record in ED with respect to the cluster
					record_distances.append(edi) #distance of a record with respect to the record of a cluster
				min_distance_index = np.argmin(record_distances) #index of the record with the smallest distance from the other records in the cluster
				min_distance = record_distances[min_distance_index] #record with least distance
				if (min_distance <= threshold): #check if it belongs to the cluster with respect to the defined threshold
					c_indexes[cluster_index].append(record_index) #add the record to the current cluster
				else: #if it doesn't belong to the cluster
					if(cluster_index < len(c_indexes)-1): #check if there are more clusters to check
						continue # if there are more clusters, go to the next one
					else: #if there are no more clusters to check
						c_indexes.append([record_index]) # create a new cluster with the current record
						break #exits for
		end_service_time = time()
		label_vector = Dbsnnc.get_labelvector( #gets final label vector
			c_indexes = c_indexes,
			shape     = EDshape[0]
		)
		service_time     = end_service_time - start_service_time
		response_time    = time() - startTime
		return ClusteringResult(
        	label_vector = label_vector,
        	response_time = response_time,
        	service_time  = service_time
   		)

	"""
	Description: It allows to generate label vector from the indexes in the cluster
	"""
	def get_labelvector(**kwargs):
		c_indexes    = kwargs.get("c_indexes",[])
		shape	     = kwargs.get("shape")
		label_vector = [-1]*shape #fill label vector with -1
		
		for index,record_index in enumerate(c_indexes):
			for index_r,record in enumerate(record_index):
				label_vector[record] = index
		return label_vector


if __name__ == "__main__":
	D1 = [
     [[-0.47858048,0.3239066 ,0.99565894],[ 0.86517666, 0.35451225,0.14643394]],
     [[-0.12232589,0.43825183,1.14077635],[ 1.25246341, 0.92122341,1.19486281]],
     [[-0.47026789,0.37170291,1.04836221],[ 0.6963951 , 0.63327398,0.60949855]],
     [[-0.17783432,0.47591765,1.09127353],[ 0.5469285 , 0.21880843,0.03896645]],
     [[ 0.68921765,0.7943895 ,0.73552208],[ 0.9355229 , 0.44789938,0.32877551]],
     [[ 0.98077831,0.14007529,0.1342674 ],[ 1.2889313 , 0.72753594,1.08419986]],
     [[ 0.9173653 ,0.94535452,1.19814476],[ 0.61404735, 0.93416473,0.74371901]],
     [[ 0.768208  ,0.398282  ,0.0412858 ],[ 0.84882065, 0.17733939,0.44667007]],
     [[-0.68496312,0.1485121 ,0.54425867],[-0.21705614, 0.33874526,0.917479  ]],
     [[-0.77366629,0.10183208,0.37457528],[-0.85589864, 0.12834858,0.2764212 ]],
     [[-0.06380652,0.17824076,1.00624891],[-0.85705555, 0.14091396,0.2853738 ]],
     [[-0.12551082,0.20070575,0.93477393],[-0.56932586, 0.50021812,0.53758405]],
     [[ 1.06044567,0.77247964,1.26151282],[-0.38386536, 0.24726505,1.06964108]],
     [[ 0.64906882,0.59360815,0.03206584],[-0.72936391,-0.14883395,0.22711304]],
     [[ 0.7580591 ,0.5773805 ,0.65258235],[-0.29785124,-0.17436218,0.36407902]],
     [[ 0.87572546,0.54100968,0.31997263],[-0.1891935 , 0.10703923,0.76197045]]]

	ED = [[0, 5.580529505857693, 5.575698708910798, 11.143072035039685, 27.823922059209888, 33.378095658707934, 33.371066127132316, 38.900861623112064, 27.808627262480886, 33.34075034443802, 38.89485591526394, 33.37165776649356, 56.416983972066035, 59.62695390481444, 53.22206468753303, 56.431171238081795], 
      [5.580529505857693, 0, 11.146656573676342, 5.596375108598275, 22.258723574967256, 27.82467129189073, 27.82062126822935, 33.3494649212635, 33.36476305437374, 38.922625834735115, 33.342662242673384, 27.78076179740188, 53.20162511072873, 56.421830934178374, 50.03115346436999, 53.22010842180256], 
      [5.575698708910798, 11.146656573676342, 0, 5.60155492554315, 33.38869993231465, 38.922704126352784, 27.800365589697833, 33.355798658388544, 22.233957354144874, 27.787746154030994, 33.38439303955155, 27.80535896158328, 53.22864612564924, 56.427317541402374, 50.00648291103973, 53.206417615054555], 
      [11.143072035039685, 5.596375108598275, 5.60155492554315, 0, 27.820931013329478, 33.37999168009015, 22.256296342778, 27.81275437664873, 27.818361414057616, 33.35073899108722, 27.823701263757993, 22.263453017533195, 50.02157124397611, 53.213423059041396, 44.47551723175446, 50.020259091582254], 
      [27.823922059209888, 22.258723574967256, 33.38869993231465, 27.820931013329478, 0, 5.607066231071538, 5.594576368628909, 11.13950006333111, 53.21461159750135, 56.405366983450726, 53.20128766634218, 50.00719966331959, 33.33614676120086, 38.91710914943426, 27.813017044888205, 33.37470065799139], 
      [33.378095658707934, 27.82467129189073, 38.922704126352784, 33.37999168009015, 5.607066231071538, 0, 11.134073457040774, 5.569227335595037, 56.41233944298839, 59.61039440434721, 56.426878541902504, 53.204190560931806, 38.92224905894453, 33.35731764921065, 33.346522870937356, 27.82734492486888], 
      [33.371066127132316, 27.82062126822935, 27.800365589697833, 22.256296342778, 5.594576368628909, 11.134073457040774, 0, 5.589722656394957, 50.00128418952134, 53.23070490685461, 50.00943430779568, 44.46807291694508, 27.792236695064986, 33.381493889636694, 22.231179846745977, 27.817167725741232], 
      [38.900861623112064, 33.3494649212635, 33.355798658388544, 27.81275437664873, 11.13950006333111, 5.569227335595037, 5.589722656394957, 0, 53.20982214736386, 56.4272299874731, 53.208820414757895, 50.00099955217463, 33.3810865875482, 27.781730808484117, 27.81567157639554, 22.23574753870137], 
      [27.808627262480886, 33.36476305437374, 22.233957354144874, 27.818361414057616, 53.21461159750135, 56.41233944298839, 50.00128418952134, 53.20982214736386, 0, 5.599243795009199, 11.165822265874253, 5.561675129455055, 33.338408843975884, 38.894753658746154, 27.778935405710726, 33.36595139872547], 
      [33.34075034443802, 38.922625834735115, 27.787746154030994, 33.35073899108722, 56.405366983450726, 59.61039440434721, 53.23070490685461, 56.4272299874731, 5.599243795009199, 0, 5.5811592194848165, 11.131579574654921, 27.827309738264972, 33.34833924387744, 33.356952071703205, 38.89884769069809], 
      [38.89485591526394, 33.342662242673384, 33.38439303955155, 27.823701263757993, 53.20128766634218, 56.426878541902504, 50.00943430779568, 53.208820414757895, 11.165822265874253, 5.5811592194848165, 0, 5.57951758660387, 22.23894187571645, 27.78797593462852, 27.824471665793155, 33.335942719451445],
      [33.37165776649356, 27.78076179740188, 27.80535896158328, 22.263453017533195, 50.00719966331959, 53.204190560931806, 44.46807291694508, 50.00099955217463, 5.561675129455055, 11.131579574654921, 5.57951758660387, 0, 27.808494164267337, 33.353362734502994, 22.26815204335076, 27.83050411697685], 
      [56.416983972066035, 53.20162511072873, 53.22864612564924, 50.02157124397611, 33.33614676120086, 38.92224905894453, 27.792236695064986, 33.3810865875482, 33.338408843975884, 27.827309738264972, 22.23894187571645, 27.808494164267337, 0, 5.582825034963576, 5.593335285012125, 11.16522498911014], 
      [59.62695390481444, 56.421830934178374, 56.427317541402374, 53.213423059041396, 38.91710914943426, 33.35731764921065, 33.381493889636694, 27.781730808484117, 38.894753658746154, 33.34833924387744, 27.78797593462852, 33.353362734502994, 5.582825034963576, 0, 11.123550895075395, 5.5559013792710745],
      [53.22206468753303, 50.03115346436999, 50.00648291103973, 44.47551723175446, 27.813017044888205, 33.346522870937356, 22.231179846745977, 27.81567157639554, 27.778935405710726, 33.356952071703205, 27.824471665793155, 22.26815204335076, 5.593335285012125, 11.123550895075395, 0, 5.559376271149611], 
      [56.431171238081795, 53.22010842180256, 53.206417615054555, 50.020259091582254, 33.37470065799139, 27.82734492486888, 27.817167725741232, 22.23574753870137, 33.36595139872547, 38.89884769069809, 33.335942719451445, 27.83050411697685, 11.16522498911014, 5.5559013792710745, 5.559376271149611, 0]]

	encrypted_threshold = 5.609272527339459


	dbs = Dbsnnc.run(
		ciphertext_matrix = D1,
		EDM = ED,
		encrypted_threshold = encrypted_threshold
	)
	print(dbs.labels_vector)

